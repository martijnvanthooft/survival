if (maxiter > 0) coef[which.sing] <- NA  #leave it be if iter=0 is set
rval <- list(coefficients  = coef,
var    = var,
loglik = coxfit$loglik,
score  = coxfit$sctest,
iter   = coxfit$iter,
linear.predictors = as.vector(lp),
means = coxfit$means,
method = method,
class ='coxph')
if (resid) {
score <- exp(lp[sorted])
coxres <- .C(Ccoxmart, as.integer(n),
as.integer(method=='efron'),
stime,
sstat,
newstrat,
as.double(score),
as.double(weights),
resid=double(n))
resid <- double(n)
resid[sorted] <- coxres$resid
names(resid) <- rownames
# rval$residuals <- resid  # not good enough
# some other code expects the ORDER of components in a coxph
# object will never change: residuals right before means
rval <- c(rval[1:6], list(residuals=resid), rval[-(1:6)])
}
rval
}
}
coxph.fit <- function(x, y, strata, offset, exposure, init, control,
weights, method, rownames, resid=TRUE)
{
n <-  nrow(y)
if (is.matrix(x)) nvar <- ncol(x)
else {
if (length(x)==0) nvar <-0
else nvar <-1
}
time <- y[,1]
status <- y[,2]
# Sort the data (or rather, get a list of sorted indices)
if (length(strata)==0) {
sorted <- order(time)
strata <- NULL
newstrat <- as.integer(rep(0,n))
}
else {
sorted <- order(strata, time)
strata <- strata[sorted]
newstrat <- as.integer(c(1*(diff(as.numeric(strata))!=0), 1))
}
if (missing(offset) || is.null(offset)) offset <- rep(0,n)
if (missing(weights)|| is.null(weights)) weights <- rep(1,n)
else {
if (any(weights<=0)) stop("Invalid weights, must be >0")
weights <- weights[sorted]
}
if (missing(exposure) || is.null(exposure)) exposure <- rep(1,n)
else {
if (any(exposure<=0)) stop("Invalid exposure, must be >0")
exposure <- exposure[sorted]
}
stime <- as.double(time[sorted])
sstat <- as.integer(status[sorted])
if (nvar==0) {
# A special case: Null model.
#  (This is why I need the rownames arg- can't use x' names)
# Set things up for 0 iterations on a dummy variable
x <- as.matrix(rep(1.0, n))
nullmodel <- TRUE
nvar <- 1
init <- 0
maxiter <- 0
}
else {
nullmodel <- FALSE
maxiter <- control$iter.max
if (!missing(init) && length(init)>0) {
if (length(init) != nvar) stop("Wrong length for inital values")
}
else init <- rep(0,nvar)
}
storage.mode(weights) <- storage.mode(init) <- "double"
coxfit <- .Call(Ccoxfit6,
as.integer(maxiter),
stime,
sstat,
x[sorted,],
as.double(offset[sorted]),
weights,
exposure,
newstrat,
as.integer(method=="efron"),
as.double(control$eps),
as.double(control$toler.chol),
as.vector(init),
as.integer(1))  # internally rescale
if (nullmodel) {
if (resid) {
score <- exp(offset[sorted])
coxres <- .C(Ccoxmart, as.integer(n),
as.integer(method=='efron'),
stime,
sstat,
newstrat,
as.double(score),
as.double(weights),
resid=double(n))
resid <- double(n)
resid[sorted] <- coxres$resid
names(resid) <- rownames
list(loglik = coxfit$loglik[1],
linear.predictors = offset,
residuals = resid,
method = method,
class = c('coxph.null', 'coxph') )
}
else list(loglik = coxfit$loglik[1],
linear.predictors = offset,
method = method,
class = c('coxph.null', 'coxph') )
}
else {
coef <- coxfit$coef
lp <- c(x %*% coef) + offset - sum(coef*coxfit$means)
var <- matrix(coxfit$imat,nvar,nvar)
if (coxfit$flag < nvar) which.sing <- diag(var)==0
else which.sing <- rep(FALSE,nvar)
infs <- abs(coxfit$u %*% var)
if (maxiter >1) {
if (coxfit$flag == 1000) {
warning("Ran out of iterations and did not converge")
if (max(lp) > 500 || any(!is.finite(infs)))
warning("one or more coefficients may be infinite")
}
else {
infs <- (!is.finite(coxfit$u) |
((infs > control$eps) &
infs > control$toler.inf*abs(coef)))
if (any(infs))
warning(paste("Loglik converged before variable ",
paste((1:nvar)[infs],collapse=","),
"; coefficient may be infinite. "))
}
}
names(coef) <- dimnames(x)[[2]]
if (maxiter > 0) coef[which.sing] <- NA  #leave it be if iter=0 is set
rval <- list(coefficients  = coef,
var    = var,
loglik = coxfit$loglik,
score  = coxfit$sctest,
iter   = coxfit$iter,
linear.predictors = as.vector(lp),
means = coxfit$means,
method = method,
class ='coxph')
if (resid) {
score <- exp(lp[sorted])
coxres <- .C(Ccoxmart, as.integer(n),
as.integer(method=='efron'),
stime,
sstat,
newstrat,
as.double(score),
as.double(weights),
resid=double(n))
resid <- double(n)
resid[sorted] <- coxres$resid
names(resid) <- rownames
# rval$residuals <- resid  # not good enough
# some other code expects the ORDER of components in a coxph
# object will never change: residuals right before means
rval <- c(rval[1:6], list(residuals=resid), rval[-(1:6)])
}
rval
}
}
# Run the following commands in the C:\Checkouts library
# R CMD build survival
install.packages("C://Checkouts//survival_3.1-7.tar.gz", repos = NULL, type = "source", lib = "C://Checkouts//R-library")
library(survival, lib.loc="C://Checkouts//R-library")
set.seed(12345)
n = 10000
lambda = 1/10
eta = 1.5
x1 = rnorm(n)
x2 = rexp(n)
x3 = c(rep(1,n/2),rep(0,n/2))
b1 = -0.1
b2 = 0.35
b3 = 0.05
gp = runif(n)
# under a weibull survival distribution
inverse_cumulative_hazard <- function(t, lambda, eta){
h <- (t/lambda)^(1/eta)
}
# generate failure time data
t <- inverse_cumulative_hazard(-1*(1/gp)*log(runif(n))*exp(-1*(x1*b1+x2*b2+x3*b3)), lambda=lambda, eta=eta)
# create failure status
status = rep(1,n)
# create matrix
covariates <- cbind(x1,x2,x3)
# create exposure weight
exposure = rep(1,n)
# create data
data <- data.frame(cbind(x1,x2,x3,gp,t,status))
# fit coxph model
fit.cox <- coxph(Surv(t,status) ~ x1+x2+x3, data=data)
survfit(fit.cox)
surv.cox <- survfit(fit.cox)
# fit
surv.cox <- survfit(fit.cox)
surv.cox <- survfit(fit.cox)
debugSource('C:/Checkouts/masterthesis/R-code/simulations.R')
?survfit
?survfit.coxph
?survfit.coxph
?coxph
?survfit.coxph
debugSource('C:/Checkouts/masterthesis/R-code/simulations.R')
?model.weights
mf = model.frame(fit.ocx)
mf = model.frame(fit.cox)
model.exposure(fit.coox)
model.exposure(mf)
fit.cox.profile$`exposure`
fit.cox$'exposure'
?coxph
surv.cox$cumhaz
# fit
surv.cox <- survfit(fit.cox, type="breslow")
surv.cox$surv
?outer
a = c(0.5,1)
b = c(1.,2)
a*b
fit.cox.profile$exposure
any(colnames(data) == 'gp')
as.vector(data[[,'gp']])
as.vector(data[['gp']])
# Run the following commands in the C:\Checkouts library
# R CMD build survival
install.packages("C://Checkouts//survival_3.1-7.tar.gz", repos = NULL, type = "source", lib = "C://Checkouts//R-library")
# Run the following commands in the C:\Checkouts library
# R CMD build survival
install.packages("C://Checkouts//survival_3.1-7.tar.gz", repos = NULL, type = "source", lib = "C://Checkouts//R-library")
uninstall.packages('survival')
library(installr)
install.packages("installr")
library(installr)
uninstall.packages('survival')
# Run the following commands in the C:\Checkouts library
# R CMD build survival
install.packages("C://Checkouts//survival_3.1-7.tar.gz", repos = NULL, type = "source", lib = "C://Checkouts//R-library")
library(survival, lib.loc="C://Checkouts//R-library")
set.seed(12345)
n = 10000
lambda = 1/10
eta = 1.5
x2 = rexp(n)
x1 = rnorm(n)
x3 = c(rep(1,n/2),rep(0,n/2))
b1 = -0.1
b2 = 0.35
b3 = 0.05
gp = runif(n)
# under a weibull survival distribution
inverse_cumulative_hazard <- function(t, lambda, eta){
h <- (t/lambda)^(1/eta)
}
# generate failure time data
t <- inverse_cumulative_hazard(-1*(1/gp)*log(runif(n))*exp(-1*(x1*b1+x2*b2+x3*b3)), lambda=lambda, eta=eta)
# create failure status
status = rep(1,n)
# create matrix
covariates <- cbind(x1,x2,x3)
# create exposure weight
exposure = rep(1,n)
# create data
data <- data.frame(cbind(x1,x2,x3,gp,t,status))
# fit coxph model
fit.cox <- coxph(Surv(t,status) ~ x1+x2+x3, data=data)
summary(fit.cox)
print(fit.cox$iter)
# fit weighted coxph model
fit.cox.profile <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=gp)
summary(fit.cox.profile)
# fit
surv.cox <- survfit(fit.cox, type="breslow")
# fit
surv.cox <- survfit(fit.cox.profile, type="breslow")
# baseline hazard fit
data <- data.frame(
x1 = c(1),
x2 = c(0.5),
x3 = c(-0.5),
exposure = c(0.75)
)
# baseline hazard fit
ndata <- data.frame(
x1 = c(1),
x2 = c(0.5),
x3 = c(-0.5),
exposure = c(0.75)
)
surv.cox <- survfit(fit.cox.profile, newdata=ndata ,type="breslow")
ndata
# baseline hazard fit
ndata <- data.frame(
x1 = c(1),
x2 = c(0.5),
x3 = c(-0.5)
)
survfit(fit.cox, newdata=ndata)
# baseline hazard fit
ndata <- data.frame(
c(
x1 = c(1),
x2 = c(0.5),
x3 = c(-0.5),
exposure = c(0.75)
)
)
# baseline hazard fit
x1=1
x2=0.5
x3=-.5
# baseline hazard fit
x1=c(1,1)
x2=c(0.5,0.5)
x3=c(-0.5,0.5)
exposure=c(1,0.75)
ndata <- data.frame(x1,x2,x3,exposure)
surv.cox <- survfit(fit.cox.profile, newdata=ndata ,type="breslow")
ndata <- data.frame(x1,x2,x3)
surv.cox <- survfit(fit.cox.profile, newdata=ndata ,type="breslow")
# print
surv.cox <- survfit(fit.cox, newdata=ndata)
?survfit.
?survfit.coxph
?survfit
?survfit.co
debugSource('C:/Checkouts/masterthesis/R-code/simulations.R')
?survfit.coxph
# print
surv.cox <- survfit(fit.cox, newdata=ndata, individual=TRUE, type="breslow")
debugSource('C:/Checkouts/masterthesis/R-code/simulations.R')
# print
surv.cox <- survfit(fit.cox, newdata=ndata, individual=TRUE, type="breslow")
debugSource('C:/Checkouts/masterthesis/R-code/simulations.R')
missing(newdata)
individual
debugSource('C:/Checkouts/masterthesis/R-code/simulations.R')
individual
debugSource('C:/Checkouts/masterthesis/R-code/simulations.R')
individual
# Run the following commands in the C:\Checkouts library
# R CMD build survival
uninstall.packages('survival')
install.packages("C://Checkouts//survival_3.1-7.tar.gz", repos = NULL, type = "source", lib = "C://Checkouts//R-library")
library(survival, lib.loc="C://Checkouts//R-library")
set.seed(12345)
n = 10000
lambda = 1/10
eta = 1.5
x1 = rnorm(n)
x3 = c(rep(1,n/2),rep(0,n/2))
x2 = rexp(n)
b1 = -0.1
b2 = 0.35
gp = runif(n)
b3 = 0.05
# under a weibull survival distribution
inverse_cumulative_hazard <- function(t, lambda, eta){
h <- (t/lambda)^(1/eta)
}
# generate failure time data
t <- inverse_cumulative_hazard(-1*(1/gp)*log(runif(n))*exp(-1*(x1*b1+x2*b2+x3*b3)), lambda=lambda, eta=eta)
# create failure status
status = rep(1,n)
# create matrix
covariates <- cbind(x1,x2,x3)
# create exposure weight
exposure = rep(1,n)
# create data
data <- data.frame(cbind(x1,x2,x3,gp,t,status))
# fit coxph model
fit.cox <- coxph(Surv(t,status) ~ x1+x2+x3, data=data)
summary(fit.cox)
print(fit.cox$iter)
# fit weighted coxph model
fit.cox.profile <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=gp)
summary(fit.cox.profile)
print(fit.cox.profile$iter)
# baseline hazard fit
x1=c(1,1)
x2=c(0.5,0.5)
x3=c(-0.5,0.5)
exposure=c(1,0.75)
ndata <- data.frame(x1,x2,x3)
# print
surv.cox <- survfit(fit.cox, newdata=ndata, type="breslow")
surv[1]
surv.cox[1]
surv.cox.profile <- survfit(fit.cox.profile, type="breslow")
surv.cox.profile <- survfit(fit.cox.profile, individual=FALSE, type="breslow")
surv.cox.profile <- survfit(fit.cox.profile, newdata=ndata, individual=FALSE, type="breslow")
ndata$ exposure = c(1,0.75)
surv.cox.profile <- survfit(fit.cox.profile, newdata=ndata, individual=FALSE, type="breslow")
plot(surv.cox.profile)
plot(surv.cox.profile, xlim=c(0,1))
plot(surv.cox.profile, xlim=c(0,25))
cumulative_hazard <- function(t, lambda, eta){
lambda*t^eta
}
cumulative_hazard <- function(t, lambda, eta){
lambda*t^eta
}
s1 <- exp(-cumulative_hazard(x, lambda, eta)*exp(x1[1]*b1+x2[1]*b2+x3[1]*b3)*exposure[1])
# add theoretical lines :D
x <- seq(0, 25, by=0.05)
s1 <- exp(-cumulative_hazard(x, lambda, eta)*exp(x1[1]*b1+x2[1]*b2+x3[1]*b3)*exposure[1])
s2 <- exp(-cumulative_hazard(x, lambda, eta)*exp(x1[2]*b1+x2[2]*b2+x3[2]*b3)*exposure[2])
lines(x,s1,col='red')
lines(x,s2,col='blue')
library(boot)
fit.cox$coefficients
cox.boot <- boot(data=data, statistic=coef, R=1000, exposure=gp)
warnings()
# fit weighted coxph model
fit.cox.profile <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=gp)
cox.boot <- boot(data=data, statistic=coef, R=10000, exposure=gp)
cox.boot
cox.boot[1]
boot.ci(cox.boot, type="bca")
coef(data, gp)
# bootstrap coefficients
coef <- function(data, exposure){
fit <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=exposure)
return(fit$coefficients)
}
coef(data,gp)
# bootstrap coefficients
coef <- function(data, exposure){
fit <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=exposure)
return(fit$coefficients)
}
cox.boot <- boot(data=data, statistic=coef, R=1000, exposure=gp)
cox.boot
# bootstrap coefficients
coef <- function(data, exposure){
fit <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=exposure)
return(fit$coefficients)
}
# bootstrap coefficients
coef <- function(data, exposure){
fit <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=exposure)
return(coef(fit))
}
cox.boot <- boot(data=data, statistic=coef, R=1000, exposure=gp)
cox.boot <- boot(data=data, statistic=coef, R=1000, formula=Surv(t,status) ~ x1+x2+x3, exposure=gp)
# bootstrap coefficients
coef <- function(data, exposure){
fit <- coxph(formula, data=data, exposure=exposure)
return(coef(fit))
}
cox.boot <- boot(data=data, statistic=coef, R=1000, formula=Surv(t,status) ~ x1+x2+x3, exposure=gp)
# bootstrap coefficients
coef <- function(formula, data, exposure){
fit <- coxph(formula, data=data, exposure=exposure)
return(coef(fit))
}
cox.boot <- boot(data=data, statistic=coef, R=1000, formula=Surv(t,status) ~ x1+x2+x3, exposure=gp)
# bootstrap coefficients
coef <- function(data, formula, exposure){
fit <- coxph(formula, data=data, exposure=exposure)
return(coef(fit))
}
cox.boot <- boot(data=data, statistic=coef, R=1000, formula=Surv(t,status) ~ x1+x2+x3, exposure=gp)
coef(data,Surv(t,status) ~ x1+x2+x3, exposure=gp)
coef(data=data,formula=Surv(t,status) ~ x1+x2+x3, exposure=gp)
return(coef(fit))
# bootstrap coefficients
coef <- function(data, exposure){
fit <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=exposure)
return(coef(fit))
}
coef(data=data,exposure=gp)
# fit weighted coxph model
fit.cox.profile <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=gp)
fit.cox.profile
coef(fit.cox.profile)
fit.cox$coefficients
# bootstrap coefficients
coef <- function(data, exposure){
fit <- coxph(Surv(t,status) ~ x1+x2+x3, data=data, exposure=exposure)
return(fit$coefficients)
}
cox.boot <- boot(data=data, statistic=coef, R=1000, exposure=gp)
# bootstrap coefficients
coef <- function(data, indices, exposure){
dt <- data[indices,]
fit <- coxph(Surv(t,status) ~ x1+x2+x3, data=dt, exposure=exposure)
return(fit$coefficients)
}
cox.boot <- boot(data=data, statistic=coef, R=1000, exposure=gp)
cox.boot
cox.boot <- boot(data=data, statistic=coef, R=10000, exposure=gp)
# bootstrap coefficients
cox.boot <- boot(data=data, statistic=coef, R=10000, exposure=gp)
